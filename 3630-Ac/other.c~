#include <iostream>
#include <fstream>
#include <algorithm>
#include <string.h>

using namespace std;

char str[10001][11];
const int sunnum=10,base='0';

struct Trie{
      bool terminal;
      //int num;
      Trie *sun[sunnum];
}node[1000000];

struct Phone{
       char num[11];
       int len;
       friend bool operator<(const Phone &a,const Phone &b)
       {
           return a.len<b.len;
       }
}p[10001];

int x=0;
bool result;

Trie *NewTrie()
{
    Trie* temp=node+x++;
    for(int i=0; i<10; i++)
    {
        temp->sun[i]=NULL;
    }
    temp->terminal=false;
    return temp;
}


void Insert(Trie *root,Phone cur)
{
    Trie *temp=root;
    for(int i=0; i<cur.len; i++)
    {  
        int k=cur.num[i]-base;
        if(temp->sun[k]==NULL) temp->sun[k]=NewTrie();
        else
        {
            if(temp->sun[k]->terminal==true)   //排序后只需处理这一种情况 即前面的串是后面的串的prefix
            {
                //return true;
                result=false;
            }
        }
        temp=temp->sun[k];
    }
     temp->terminal=true;
}

int main()
{
    int t,n,i;
    freopen("acm.txt","r",stdin);
    scanf("%d",&t);
    while(t--)
    {
        Trie *root=NewTrie();
        scanf("%d",&n);
        for(i=0; i<n; i++)
        {
            scanf("%s",p[i].num);
            p[i].len=strlen(p[i].num);
        }
        sort(p,p+n);  //先排序
        result=true;
        for(i=0; i<n; i++)
        {
           Insert(root,p[i]);
        }
       if(result) printf("YES\n");
       else printf("NO\n");
    }
return 0;
}
