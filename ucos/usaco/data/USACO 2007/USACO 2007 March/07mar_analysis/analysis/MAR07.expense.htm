<html>
<head> <title>USACO MAR07 expense Analysis</title> </head>
<body bgcolor=#FFFFFF>
<center><img src='/usaco/cow1.jpg' width='742' height='118'></center>
<h2>USACO MAR07 Problem 'expense' Analysis</h2>
<h4>by by Kaan Soral, Onur Soral and Cihat Imamoglu from Turkey</h4>
<p>Problem: On first impression, this might appear to be a set
partitioning problem, which is NP-Complete.  Fortunately, the fact
that days cannot be swapped, i.e., have fixed positions, makes the
problem easy. The solution turns out to be simple binary search on
the values of 'monthly spending limit'.

<p>Solution: Firstly, let's call the 'monthly spending limit' a
'value'.
<p>
For a given value X, we check if we can make an assignment (of the
days to fajamonths) to spend X value at most, for every K fajamonths.
This is greedy and very simple, 
<pre>
while total is not bigger than X, (total<=X)
         add as many days as possible to that month, and increase total
accordingly (greedy)
else total=0, start a new month (total months++)
</pre>
<p> If total months exceeds K limit, it's not possible with an X
value to make arrangement, otherwise it's possible.
<p>
And the important points are:
<ul>
<li>
for X and Y values X>Y  if it's possible to make an arrangement with a Y value,
it's also possible to make it with an X value.
<li>
for X and Y values X>Y  if it's not possible to make an arrangement with X
value, it's also not possible to make it with a Y value.
</ul>
These properties make it possible for this problem to be solved by using binary
search.
<p>
We start with A=0 and B=(the total of all day values) and binary
search for the min Value.

<p>Complexity: Checking for an X value if it's possible to make an
arrangement takes O(N) time. Binary Search between 0 and MAXVAL is
O(log(MAXVAL)). MAXVAL is approximately 10,000*N, call AV the average
value of day values.  The total complexity is: O(N*log(N*AV))

<p>Here is  the code:
<pre>
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#define MAXN 101000

int N,M;
int array[MAXN];
long long int total,MIN=1000000000;

void read(void) {
    int i;
    FILE *input=fopen("expense.in","r");
    fscanf(input," %d %d",&amp;N,&amp;M);
    for(i=1;i&lt;=N;i++) {
        fscanf(input," %d",&amp;array[i]);
        total+=array[i];                          /* The total of day values */
    }
    fclose(input);
}

int try(long long int num) {                      /* Function that checks if
its possible to make an arrangement */ 
    long long int leftm=total,current=0;
    int left=M;                                   /* Total Months */
    else if(left==1) return 0;
    int i;
    for(i=1;i&lt;=N;i++) {
        if(current+array[i]&lt;=num)
            current+=array[i]; leftm-=array[i];   /* Put as much as it can take to one month */
        else {
            current=0;                            /* Start a new month */
            left--;
            if(left==1) {                         /* if there is one month left */
                if(leftm&lt;=num) return 1;          /* if the left values fit into a monthly value its possible return 1 */
                else           return 0;
            }
            current=array[i];
            leftm-=array[i];
        }
    }
    if(leftm) return 0;
    return 1;
}

void find(void) {
    if(M==1) { MIN=total; return; }
    long long int a,b,c,x;
    a=0; b=total;                                 /* Binary search on total */
    while(a&lt;b) {
        c=(a+b)/2;
        x=try(c);
        if(x) b=c;
        else a=c;
        if(b==a+1) {if(try(a)) b=a; break;}
    }
    MIN=b;
}

void write(void) {
    FILE *output=fopen("expense.out","w");
    fprintf(output,"%lld\n",MIN);
    fclose(output);
}

int main() {
    read();
    find();
    write();
    return 0;
}
</pre>

