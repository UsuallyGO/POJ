<html>
<head> <title>USACO MAR07 cowturn Analysis</title> </head>
<body bgcolor=#FFFFFF>
<center><img src='/usaco/cow1.jpg' width='742' height='118'></center>
<h2>USACO MAR07 Problem 'cowturn' Analysis</h2>
<h4>by Richard Peng</h4>
<p>
We reduce the problem to finding whether we could reverse all cows given a
preset turn length of k.
</p>

<p>
We consider turns by the the position of the leftmost cow they affect. The 1st
cow can only be turned by the first turn, so the first turn is uniquely
determined. The 2nd cow can only be turned by the 1st and 2nd turn, but the 1st
turn is already uniquely determined, so the 2nd turn is also fixed. If we
proceed 'up' the sequence this way, we could see all the turns are uniquely
determined by the configurations of the cows and the turns before them.
</p>

<p>
We now need to track how many times a cow is turned by the flips before it.
This is equivalent to a XOR sum of all the turn bits within k of it. This can
be tracked using the standard method of keeping a pointer of whether the
sequence start and moving that pointer accordingly as the location of the
'current' cow moves.
</p>

<p>
This runs in O(n) time per iteration, which gives a O(n^2) algorithm in the
worst case.
</p>

<p>
Code by Brian Dean:
</p>

<pre>
#include &lt;stdio.h&gt;
#define MAX_N 5000

int Boundary[MAX_N+1], Parity[MAX_N+1], N;

int check(int k)
{
  int i, count=0;
  for (i=0; i&lt;N; i++) Parity[i] = Boundary[i];
  for (i=0; i&lt;=N-k; i++) {
    count += Parity[i];
    Parity[i+k] ^= Parity[i];
  }
  while (i&lt;N) if (Parity[i++]) return MAX_N+1;
  return count;
}
  
int main(void)
{
  FILE *fp = fopen("cowturn.in", "r");
  int i, v, minmoves = MAX_N+1, best_k;
  char c, dir='F';

  fscanf (fp, "%d", &amp;N);
  for (i=0; i&lt;N; i++) {
    fscanf (fp, " %c", &amp;c);
    if (c!=dir) { dir=c; Boundary[i] = 1; }
  }
  if (dir=='B') Boundary[N] = 1;
  fclose (fp);

  for (i=1; i&lt;=N; i++) {
    v = check(i);
    if (v &lt; minmoves) { best_k = i; minmoves = v; }
  }
  
  fp = fopen ("cowturn.out", "w");
  fprintf (fp, "%d %d\n", best_k, minmoves);
  fclose (fp);
  return 0;
}
</pre>

