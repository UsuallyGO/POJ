
#include <stdio.h>
#include <string.h>

#define DEBUG 0
#define MAX 305
#define VERY_MUCH 1000000

struct OneStep
{
    int x;
    int y;
    int depths;
};

struct OneStep Queue[VERY_MUCH];
int visit[MAX][MAX];
int Seek_p;
int Curr_p;
int length;

struct OneStep deQueue()
{
    Seek_p++;
    return Queue[Seek_p-1];
}

void enQueue(int x, int y, int depth)
{
#if DEBUG
    printf("x:%d y:%d depth:%d\n", x, y, depth);
#endif
    Queue[Curr_p].x = x;
    Queue[Curr_p].y = y;
    Queue[Curr_p].depths = depth;
    Curr_p++;
    visit[x][y] = 1;
}

int checkPos(int x, int y)
{
    if(x < 0 || x >= length)
	return 0;
    if(y < 0 || y >= length)
	return 0;
    return 1;
}

int seekShortest(int start_x, int start_y, int end_x, int end_y)
{
    struct OneStep tmpStep;
    int x, y, steps; 

    memset(visit, 0, sizeof(visit)); 
    memset(Queue, 0, sizeof(Queue));

    Queue[0].x = start_x;
    Queue[0].y = start_y;
    Queue[0].depths = 0;
    visit[start_x][start_y] = 1;

    Seek_p = 0;
    Curr_p = 1;

    while(1)
    {
	tmpStep = deQueue();	
	x = tmpStep.x;
	y = tmpStep.y;
	steps = tmpStep.depths+1;
	if(x == end_x && y == end_y)
	    return tmpStep.depths;
	
	if(checkPos(x+2, y-1) && !visit[x+2][y-1])
	    enQueue(x+2, y-1, steps);
	if(checkPos(x+1, y-2) && !visit[x+1][y-2])
	    enQueue(x+1, y-2, steps);
	if(checkPos(x-1, y-2) && !visit[x-1][y-2])
	    enQueue(x-1, y-2, steps);
	if(checkPos(x-2, y-1) && !visit[x-2][y-1])
	    enQueue(x-2, y-1, steps);
	if(checkPos(x-2, y+1) && !visit[x-2][y+1])
	    enQueue(x-2, y+1, steps);
	if(checkPos(x-1, y+2) && !visit[x-1][y+2])
	    enQueue(x-1, y+2, steps);
	if(checkPos(x+1, y+2) && !visit[x+1][y+2])
	    enQueue(x+1, y+2, steps);
	if(checkPos(x+2, y+1) && !visit[x+2][y+1])
	    enQueue(x+2, y+1, steps);
    }

}

int main()
{
    int cases;
    int start_x, start_y;
    int end_x, end_y;
    int i, j, k;
    int steps;

    scanf("%d", &cases);
    for(i = 0; i < cases; i++)
    {
	scanf("%d", &length);
	scanf("%d %d", &start_x, &start_y);
	scanf("%d %d", &end_x, &end_y);
	steps = seekShortest(start_x, start_y, end_x, end_y);	
	printf("%d\n", steps);
    }

    return 0;
}
